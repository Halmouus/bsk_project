# Generated by Django 5.1.3 on 2024-11-29 10:38

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BankAccount",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "bank",
                    models.CharField(
                        choices=[
                            ("ATW", "Attijariwafa Bank"),
                            ("BCP", "Banque Populaire"),
                            ("BOA", "Bank of Africa"),
                            ("CAM", "Crédit Agricole du Maroc"),
                            ("CIH", "CIH Bank"),
                            ("BMCI", "BMCI"),
                            ("SGM", "Société Générale Maroc"),
                            ("CDM", "Crédit du Maroc"),
                            ("ABB", "Al Barid Bank"),
                            ("CFG", "CFG Bank"),
                            ("ABM", "Arab Bank Maroc"),
                            ("CTB", "Citibank Maghreb"),
                        ],
                        max_length=4,
                    ),
                ),
                (
                    "account_number",
                    models.CharField(
                        max_length=30,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                10, "Account number must be at least 10 characters"
                            ),
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numeric characters allowed"
                            ),
                        ],
                    ),
                ),
                (
                    "accounting_number",
                    models.CharField(
                        max_length=10,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                5, "Accounting number must be at least 5 characters"
                            ),
                            django.core.validators.RegexValidator(
                                "^\\d+$", "Only numeric characters allowed"
                            ),
                        ],
                    ),
                ),
                (
                    "journal_number",
                    models.CharField(
                        max_length=2,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^\\d{2}$", "Must be exactly 2 digits"
                            )
                        ],
                    ),
                ),
                ("city", models.CharField(max_length=100)),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("national", "National"),
                            ("international", "International"),
                        ],
                        max_length=15,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
            ],
            options={
                "ordering": ["bank", "account_number"],
            },
        ),
        migrations.CreateModel(
            name="item",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                ("quantity", models.PositiveIntegerField()),
                ("price", models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Checker",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("code", models.CharField(blank=True, max_length=10, unique=True)),
                (
                    "type",
                    models.CharField(
                        choices=[("CHQ", "Cheque"), ("LCN", "LCN")], max_length=3
                    ),
                ),
                (
                    "num_pages",
                    models.IntegerField(choices=[(25, "25"), (50, "50"), (100, "100")]),
                ),
                (
                    "index",
                    models.CharField(
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[A-Z]{1,3}$", "Must be 1 to 3 uppercase letters."
                            )
                        ],
                    ),
                ),
                (
                    "starting_page",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                ("final_page", models.IntegerField(blank=True)),
                ("current_position", models.IntegerField(blank=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "owner",
                    models.CharField(default="Briqueterie Sidi Kacem", max_length=100),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("in_use", "In Use"),
                            ("completed", "Completed"),
                        ],
                        default="new",
                        max_length=10,
                    ),
                ),
                (
                    "bank_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="testapp.bankaccount",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ExportRecord",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("exported_at", models.DateTimeField(auto_now_add=True)),
                ("filename", models.CharField(max_length=255)),
                ("note", models.TextField(blank=True)),
                (
                    "exported_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Invoice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("ref", models.CharField(max_length=50, unique=True)),
                ("date", models.DateField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("final", "Finalized"),
                            ("paid", "Paid"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("payment_due_date", models.DateField(blank=True, null=True)),
                ("exported_at", models.DateTimeField(blank=True, null=True)),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("not_paid", "Not Paid"),
                            ("partially_paid", "Partially Paid"),
                            ("paid", "Paid"),
                        ],
                        default="not_paid",
                        max_length=20,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("invoice", "Invoice"),
                            ("credit_note", "Credit Note"),
                        ],
                        default="invoice",
                        max_length=20,
                    ),
                ),
                (
                    "export_history",
                    models.ManyToManyField(
                        blank=True, related_name="invoices", to="testapp.exportrecord"
                    ),
                ),
                (
                    "original_invoice",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="credit_notes",
                        to="testapp.invoice",
                    ),
                ),
            ],
            options={
                "permissions": [
                    ("can_export_invoice", "Can export invoice"),
                    ("can_unexport_invoice", "Can unexport invoice"),
                ],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
                (
                    "vat_rate",
                    models.DecimalField(
                        choices=[
                            (0.0, "0%"),
                            (7.0, "7%"),
                            (10.0, "10%"),
                            (11.0, "11%"),
                            (14.0, "14%"),
                            (16.0, "16%"),
                            (20.0, "20%"),
                        ],
                        decimal_places=2,
                        default=20.0,
                        max_digits=5,
                    ),
                ),
                (
                    "expense_code",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9]{5,}$",
                                "Expense code must be numeric and at least 5 characters long.",
                            )
                        ],
                    ),
                ),
                ("is_energy", models.BooleanField(default=False)),
                ("fiscal_label", models.CharField(max_length=255)),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("name", "expense_code"),
                        name="unique_product_name_expense_code",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="InvoiceProduct",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "quantity",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                (
                    "unit_price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.01)],
                    ),
                ),
                (
                    "reduction_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=0.0,
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(100.0),
                        ],
                    ),
                ),
                (
                    "vat_rate",
                    models.DecimalField(
                        choices=[
                            (0.0, "0%"),
                            (7.0, "7%"),
                            (10.0, "10%"),
                            (11.0, "11%"),
                            (14.0, "14%"),
                            (16.0, "16%"),
                            (20.0, "20%"),
                        ],
                        decimal_places=2,
                        default=20.0,
                        max_digits=5,
                    ),
                ),
                (
                    "invoice",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="products",
                        to="testapp.invoice",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="testapp.product",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Profile",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("position", models.CharField(max_length=100)),
                ("date_of_joining", models.DateField(blank=True, null=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("contact_number", models.CharField(blank=True, max_length=15)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Supplier",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z0-9 ]*$",
                                "Only alphanumeric characters are allowed.",
                            )
                        ],
                    ),
                ),
                (
                    "if_code",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9]*$", "Only numeric characters are allowed."
                            )
                        ],
                    ),
                ),
                (
                    "ice_code",
                    models.CharField(
                        max_length=15,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9]*$", "Only numeric characters are allowed."
                            )
                        ],
                    ),
                ),
                (
                    "rc_code",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9]*$", "Only numeric characters are allowed."
                            )
                        ],
                    ),
                ),
                (
                    "rc_center",
                    models.CharField(
                        max_length=100,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z0-9 ]*$",
                                "Only alphanumeric characters are allowed.",
                            )
                        ],
                    ),
                ),
                (
                    "accounting_code",
                    models.CharField(
                        max_length=20,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[0-9]{5,}$",
                                "Expense code must be numeric and at least 5 characters long.",
                            )
                        ],
                    ),
                ),
                ("is_energy", models.BooleanField(default=False)),
                (
                    "service",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        validators=[
                            django.core.validators.RegexValidator(
                                "^[a-zA-Z0-9 ]*$",
                                "Only alphanumeric characters are allowed.",
                            )
                        ],
                    ),
                ),
                (
                    "delay_convention",
                    models.IntegerField(
                        choices=[
                            (0, "0"),
                            (30, "30"),
                            (60, "60"),
                            (90, "90"),
                            (120, "120"),
                        ],
                        default=60,
                    ),
                ),
                ("is_regulated", models.BooleanField(default=False)),
                (
                    "regulation_file_path",
                    models.FileField(
                        blank=True, null=True, upload_to="supplier_regulations/"
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("name", "rc_code"), name="unique_supplier_name_rc_code"
                    )
                ],
            },
        ),
        migrations.AddField(
            model_name="invoice",
            name="supplier",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="testapp.supplier"
            ),
        ),
        migrations.CreateModel(
            name="Check",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("position", models.CharField(max_length=10)),
                ("creation_date", models.DateField(default=django.utils.timezone.now)),
                ("payment_due", models.DateField(blank=True, null=True)),
                (
                    "amount_due",
                    models.DecimalField(
                        decimal_places=2, editable=False, max_digits=10
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.01"))
                        ],
                    ),
                ),
                ("observation", models.TextField(blank=True)),
                ("delivered", models.BooleanField(default=False)),
                ("paid", models.BooleanField(default=False)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("paid_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("cancellation_reason", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("printed", "Printed"),
                            ("ready_to_sign", "Ready to Sign"),
                            ("pending", "Pending"),
                            ("delivered", "Delivered"),
                            ("paid", "Paid"),
                            ("rejected", "Rejected"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                ("rejected_at", models.DateTimeField(blank=True, null=True)),
                (
                    "rejection_reason",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("insufficient_funds", "Insufficient Funds"),
                            ("signature_mismatch", "Signature Mismatch"),
                            ("amount_error", "Amount Error"),
                            ("date_error", "Date Error"),
                            ("other", "Other"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                ("rejection_note", models.TextField(blank=True)),
                ("rejection_date", models.DateTimeField(blank=True, null=True)),
                ("received_at", models.DateTimeField(blank=True, null=True)),
                ("received_notes", models.TextField(blank=True)),
                ("signatures", models.JSONField(default=list)),
                (
                    "replaces",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="replaced_by",
                        to="testapp.check",
                    ),
                ),
                (
                    "checker",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="checks",
                        to="testapp.checker",
                    ),
                ),
                (
                    "cause",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="testapp.invoice",
                    ),
                ),
                (
                    "beneficiary",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="testapp.supplier",
                    ),
                ),
            ],
            options={
                "ordering": ["-creation_date"],
            },
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.UniqueConstraint(
                fields=("supplier", "ref"), name="unique_supplier_invoice_ref"
            ),
        ),
        migrations.AddConstraint(
            model_name="invoice",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        models.Q(
                            ("original_invoice__isnull", True), ("type", "invoice")
                        ),
                        models.Q(
                            ("original_invoice__isnull", False), ("type", "credit_note")
                        ),
                        _connector="OR",
                    )
                ),
                name="credit_note_must_have_original_invoice",
            ),
        ),
        migrations.AddConstraint(
            model_name="check",
            constraint=models.CheckConstraint(
                condition=models.Q(("amount__lte", models.F("amount_due"))),
                name="check_amount_cannot_exceed_due",
            ),
        ),
    ]
